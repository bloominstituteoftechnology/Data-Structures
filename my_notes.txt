________________Data Structures_____________

Linked List, Queue, Binary Search Tree, Heap

Linked List:
    used to store lists of values, differnece between array and linklist is the LL stores 
    values in nodes, each node is connected by a reference.
    array = [1,2,3,4,5] :a block of memeory
    LinkList 1 -> 2 -> 3 -> 4 -> 5 -> N :nodes connected by reference
            head      value     tail  None :there should be only 1 node that points to None
    code example:
    class LinkedList:
        self.head = head_node
        self.tail = tail_node

    Linked List are One Way Streets, no refernceing previous nodes only moving forward
    How to insert new values: new node points to None, old tail now refernces new node.
    Lookup: inserting new values, iterating over Linked List, delete or remove items
    Pros:
    Easier to insert into and delete from the middle of a linked list compared to an array(why is this the case?)
    We can keep adding elements to Linked Lists as much as we want, unlike arrays with a static amount of allocated memory
    Cons:
    Linked lists are not as cache friendly since cashes typically optimized for contigous memory accesses
    Linked lists do not need to be allocated with a static amount of momory up front

Queue:
    Waiting in line- that is what a queue is. You have to wait for everyone in front of you to go first
    Added elements go to the back, then just move on up. 
    First In First Out (FIFO)
    code example:
    class Queue:
        self.size = 0
        self.storage = storage_data_structure

        size is so we know how long our queue is
        storage is the container
    Pros:
    Queues are simple and intuitive to use and implement
    They can be used to serialize data coming in from multiple sources, but they are joined in a common purpose
    (like people going to a bank, they went there to get money, but one person will be going to buy a house
        while another is just getting a sandwhich, while a psycho is just going to burn the money lol)
    Cons:
    They are not general-purpose at all

Binary Serach Tree:
    What are trees? - Intuitively, trees can be thought of as linked lists, but withour the constraint
    that each node only points to one other node. A tree node can point to multiple other nodes in the tree.
    Note...that Linked Lists themselves count as trees!!!!
    Binary Tree- why binary? points to how many nodes a single node can point to, in this case that would be 2
    this is the typlical CYOA choices (Left or Right?, Red Pill or Blue Pill?) only 2 choices and the tree gets bigger from there
        Root: top most node
        Child: node directly connected to another node, coming off the Root
        Parent: node directly connected to another node, going up to the Root
        Siblings: share a common Parent
        Leaf: childless node
    ---Rule For Binary Tree-------------
    for any given node, all values in the left subtree are less than the value at the given node.
    Conversely all values in the right subtree are greater than or equal to the value of the given node
                14
                9      22
            8   11      16   27
        2      10         18
    code example:
    class BinarySearchTree:
        self.value = value
        self.left = left_subtree
        self.right = right_subtree
    Checking for a Value in a Binary Serach Tree(BST):
    starting from the root, is what we are looking for greater or less than that?
    remember the BST rule above. then we just keep comparing downt he tree until we find what we are looking for
    Look up- how to insert values into a BST, how to delete, and how to show all, and what is a balanced tree?
    Pros:
    Searching for an element ina binary search tree is significantly more efficient than Searching
    through an array or a linked list
    Cons:
    As a trade-off, it is not as efficient to insert into a BST
    And, the performance of a BST depends on whether the tree is "balanced" or not

Heap:
What are heaps? - they are about one thinga nd one thing only! PRIORITY
imagine your clothes pile, the clothes on top are the ones you wear more often
stuff on the bottom, not as often. 
Useful whenever you can define some sort of "priority"
mid and max elements are common defining labels
code example:
def get_max(queue):
    max_value = queue[0]
    for element in queue:
    if element > max_value:
        max_value = element
    return max_value
This is O(n) linear time runtime
    but we can do better = 0(1) constant time
indexing, or key names ways to access values faster
BST we always have the Root,starting point
Heap as BST instead of Left Right, it's going down that the values lessen. 100 at the top 3 at the bottom
            100
        19         36
    17  3         25     1
2   8            12        0
Delete from Heap- will delete the max element first/ top/ Root
Need to replace the root
take a leaf, then run down the tree swapping values until the top is max again
until heap is valid
runtime of delete.......

Pros:
Heaps are maximally efficient at what they do
They are also very flexible since we can generalize the idea of priority to many different contexts
Cons:
the combining of the tree and array based approaches does not make the heap a particularly intuitive data Structures_____________
to understand and grasp

we don't have direct access to any of the other nodes besides the Root
can turn it into an array, then we would have access to everything
but what about the parent child relationship when this is converted into an array?
THis formula allows you to calculate that:
 l = 2i + 1
 r = 2i + 2      
 p = floor( ((i - 1) / 2))
